コンピュータに限らず、道具や機械の操り方に関する専門用語に、高水準(high level)と低水準(low level)があります。
高級(high class)や低級(low class)と表現される場合もありますが、どちらも次のような意味で用いられます。

高水準、低水準とは。
高水準(ハイレベル)・高級(ハイクラス)
・機械自体に、アシスト機能や自動制御機能、安全装置が組み込まれている。
・操作する人は、少ない手順でより簡単に機械を操ることができる。
・初心者に優しく、多くの人がその機械を利用できる。

低水準(ローレベル)・低級(ロークラス)
・機械自体には、最低限の仕組みしか備わっていない。
・多くの複雑な操作を行いながら機械を操る必要がある。
・熟練すれば、機械の真の実力を解放でき、自由自在かつ高度に操れる。



国内で普及している車のほとんどがAT車であるように、世の中で利用されているプログラミング言語のほとんどは高級言語と言われるものです。
Java、Python、PHPなど多数存在しますが、いずれも便利な命令や安全機構が文法として準備されていて、プログラミング入門車に優しいという特徴があります。
対する低級言語として最もよく知られているのは、アセンブラという言語です。
CPUが直接解釈できる20~30種類程度の命令しか使えず、型・制御・構造体・配列・関数などの便利な仕組みも存在しないか、かなり限定的です。

アセンブラでプログラムを書く作業は、MT車の運転以上に大変です。
そのため、、アセンブラを書ける技能を持つエンジニア自体が非常に少なく、そんな彼らでさえ一般的な開発では高級言語を用いる場面がほとんどです。
しかし、次のようなケースでは、アセンブラのような低級言語を使うメリットがデメリットを上回ることがあります。
・OS(Windows, macOS, Linuxなど)を開発するとき
・コンピュータに接続される周辺機器を細かく制御する必要があるとき
・家電や自動車など、PC以外の機械の中で動作するプログラムを作るとき

これら3つに共通して要求されるのは、次の条件です。
低級言語に求められる条件
(1)小さいサイズで極めて高速に動作するプログラムを作るとき
(2)特殊なCPU命令やメモリ領域も含めて自由自在に操れるとき

これらの条件のうち、(1)の要求は年々小さくなっているものの、やはりサイズや速度の制限は無視できるものではありません。
また、OSや家電などがなくならない限り、(2)の要求がなくなることもありません。そして、OSや家電はこの世から無くならないでしょう。



私たちが学んでいるC言語は、数あるプログラミング言語の中の「王」とも言われています。

C言語だけが持つ特徴
高級言語でもあり、低級言語でもある。
「高級と低級の両方の特徴を持つ」

C言語は低級言語としての命令や構文も持ち合わせています。
これまでの章では伏せていましたが、いざそれらの命令を活用すれば、アセンブラ同様にCPUやメモリを自由自在に制御するプログラムだって作成できるのです。



C言語は「コンピュータを意のままに操れる」低水準な機能も兼ね備えています。
しかし、運転スキルが伴わないまま不用意にMT車を操ろうとすれば大事故を起こしかねないように、
C言語の低水準機能も大きな危険をはらんでいる道具であることを、決して忘れてはなりません。

力と責任
C言語は、時に不幸を招いてしまうほどの力を持っている。
しかし適切に扱えば、他の言語では実現できない世界を創り上げることができる。
C言語エンジニアは、その「力と責任」を背負いながらコードを書く。



C言語が持つ低水準機能の特徴的なものとして、インラインアセンブラ(inline assembler)という構文があります。
これはC言語のプログラムの一部に、アセンブラ言語で命令を書き込める機能です。

int a = 10; int b; //ここはC言語
asm ("movl %1, %%eax;" //ここからはアセンブラ言語(意味は理解不要です)
         "movl %%eax, %0;"
          :"=r"(b)
          :"r"(a)
          :"%eax"
  );

アセンブラ言語の知識も必要なため滅多に利用されませんが、いざとなればCPUもメモリもほぼ自由自在に制御可能になります。



メモリ(memory)は、コンピュータ内部で情報の記憶を担当するICチップです。
製品によって記憶できる容量が決まっており、例えば8GBや16GBなどの製品が存在します。
メモリにはマス目状に多数の区画が並んでいて、1つのマス目に1バイトの情報(0または1が8つ並ぶ)を書き込めるので、巨大な方眼紙のようなものと捉えることができます。
（16GBのメモリの場合、約160億個のマス目が並んでいると考えればいい。）

あるマス目の場所を指し示す時には、並んだマス目の先頭を0として、そこから何番目の場所であるかを指定します。
このような、ある情報が格納されているメモリ内の位置を一意に示す数値をアドレス(address)といい、単位には「番地」を用います。




ほぼすべてのプログラムは、実行中、情報を一時的に記憶しておく必要があります。
つまり、メモリのどこかに情報を書いたり読んだりしながら動作するわけです。
（「情報を一時的に記憶しておく」＝ 変数）

私たちがC言語の「高水準の世界」において、メモリの情報を読み書きするために使う道具が変数です。
実際、int a;などと変数宣言すると、C言語はOSと協力して次のような動きをします。
①メモリ領域の空いている場所を探す（仮に4020~4023番地）。
②変数aが、4020~4023番地を使っている状態を記憶する。
③以後、変数aを読み書きする場合には、4020~4023番地を読み書きする。
（ただの変数宣言なのに、C言語は裏でメモリとたくさんやり取りをしている）
（そして、それらを全部自分でやらなきゃいけないのが、「低水準の世界」）

変数宣言とアクセスの実態
・変数宣言　メモリのある領域を確保すること
・代入　メモリ領域の指定番地に情報を書き込むこと
・取得　メモリ領域の指定番地から情報を読み出すこと

なお、変数の発展版とも言える配列や構造体なども、動きはやや複雑にはなりますが、基本的にこれと同じ仕組みで実現されています。