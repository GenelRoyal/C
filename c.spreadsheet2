変数＝データを格納するためにコンピュータ内部に準備する箱
変数に値を入れることを代入、取り出すことを取得と言います。
どちらも変数を宣言してからじゃないと操作できません。
変数を宣言するときには、変数名(データを格納する箱の名前)と型(変数の種類と大きさ)の２つを必ず指定します。
変数宣言の文＝型 変数名;
型とは変数に収められるデータの種類。
intは整数を表す型。整数しか代入できず、小数や文字の値は格納できません。

C言語プログラムでは変数以外のものにも名前をつけることがありますが、
それらの名前に使える文字や数字の並びを識別子(identifier)と言います。
予約語(keyword)は使用できない。intやvoid,returnなどは使用不可。35個ほどある。
大文字/小文字/、全角/半角は区別される。例：nameとNameは別の変数とみなされる。
小文字から始まる、その変数の意味がわかる名前にするのが好ましい。

char glasses;  //±約128 消費メモリ1バイト
glasses = 3;
short age;  //±約3.2万 2バイト
age = 25;
int salary;  //±約21億 4バイト
salaru = 263000;
long worldPopulation;  //±約21億または±役900京　4バイトまたは8バイト
worldPopulation = 8100000000L;

printf("%dバイト\n", (int)(sizeof(long)));  //longの箇所に調べたい型をかく
自分の環境での厳密なサイズはこれで調べられる。

格納可能な上限値を超える値を変数に代入しようとすることをオーバーフロー(overflow)と言います。
C言語の場合、オーバーフローが発生してもエラーは発生せず、変数の値が想定外の内容になって壊れてしまい、
何事もなかったようにプログラムが動き続けてしまうケースがあります。なのでオーバーフローには十分注意。

コンピュータの内部では、小数を浮動小数点という形式で管理していることから、
浮動小数点型(floating point type)と称されることもあります。
double height;  //特別な事情がない限り、小数の値を扱うときはdouble型を利用
height = 171.2;
float weight;
weight = 67.5F;
浮動小数点方式は真に厳密な計算ができないという弱点がある。
計算の際に小さな誤差が生じることがあり、積み重なると大きな問題になるケースがあるので、
誤差の許されない計算にfloat型やdouble型を用いてはいけません。

bool型は二者択一の情報を格納するためのデータ型。真偽値型という。
肯定的な情報を意味するtrue,否定的な情報を意味するfalseのどちらかの値のみ代入できます。
bool isError;
isError = true:  //エラーである
bool result;
result = false;  //結果は失敗
最新でないC言語を使っている場合、この型を利用するためにはソースコードの先頭に#include <stdbool.h>
という宣言を追加する必要があります。
C言語には真偽を表すためにint型を流用し、0を偽、１(または0以外の値)を真にする習慣がある。
真が0以外の値である、つまり1とは限らない事実は非常に重要なので覚えておくように。

コンピュータの内部には、全ての文字に文字コードという数値が割り振られています。
C言語誕生当時から半角1文字分の文字コードを変数に格納するためにchar型がよく用いられていたため、
整数型でもあり文字型でもある。
char langName;
langName = 'C';  //67と処理される
char element;
element = '火';  //コンパイルエラーが発生する。
容量が1バイト、256種類の文字しか扱えないchar型は、
何千種類もの文字がある日本語文字(ひらがな・カタカナ・漢字などの全角文字)を扱えない。