配列(array)は同じ種類の複数のデータを並び順で格納するデータ構造。
配列の中には、箱が連続して並んでいます。箱の一つ一つを要素(element)といい、変数の同じような型があり、データを格納できます。
配列の各要素の型は全て同じで、番号がついています。この要素の番号を添字(index)といい、0から始まる決まりになっています(1からではないことに注意)。
例えば、要素が5つある配列では、0番から4番までが存在し、5番の添え字を持つ要素はありません。
配列の最初の要素は0番から始まり、最後の添え字は全体の要素数より1つ小さな数となる。


配列宣言の文
　要素の型 変数名[要素数];

int gems[10];  //int型の要素が10個並んだ配列変数gems

配列要素へのアクセス
　配列変数名[添え字]

gemsの1番の要素に数値を代入するには、gems[1] = 3;のように記述する。
ここで、配列の最初の要素は0番の添え字を持つというルールを思い出してください。
gems[1] = 3;は配列gensの先頭ではなく、先頭から2番目の要素に3を代入することになります。


gems[添え字]と書くと各要素(小箱)を指す。
ちなみに、単にgemsと書くと配列全体(外側の大箱)を意味するんだ。


ところで、gems[10]という配列を宣言した場合、配列の要素数は10ですが、最初の要素を示す添え字は0であるため、最も大きい添え字の値は9になります。
宣言するときは[10]なのに、使うときには[9]までなんてちょっと紛らわしい。
これは、配列を宣言するときに書く[]と、配列の要素を指定するときに書く[]では、その意味も機能も似て非なるものだからです。
宣言の[]の中に書く数字は、何個の要素が必要なのかを個数でして指定するものです。
一方、配列を使うときの[]に書く数字は、何番目の要素なのかを位置で指定するものです。
そして、C言語では、位置を指定するときには0から始まるというルールを考慮する必要がある。
宣言時の[]と利用時の[]は全く別物だと思った方がいい。


配列の宣言と初期化
　要素の型 配列変数名[要素数] = {要素[0]の初期値,
           要素[1]の初期値,...};
※右辺を要素の型 配列変数名[]とすると、初期値に指定した数が要素数となる。

int a[5] = {0, 0, 0, 0, 0};

なお、この構文を利用する場合、[]の中に書く要素数の指定は省略することができ、{}内に記述した初期値の数を要素数として配列が定義されています。

int a[] = {0, 0, 0, 0, 0};  //配列は要素数5として定義される

また、要素数を具体的に指定した場合は、{}内の初期値の数が要素数に対して不足していても問題ありません。
足りない分は0で初期化される決まりになっています。

int a[5] = {20, 30, 10};  //要素[3][4]は0で初期化される

これを応用すると、全要素を0で初期化する処理は、さらに次のように書き換え可能です。全ての要素が0で初期化されます。

int a[5] = {0};  //従来から使える表記
int a[5] = {};  //最新のC言語で使える表記