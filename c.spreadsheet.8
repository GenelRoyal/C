1つのプログラムを複数の部品に分けて開発できる、部品化のしくみを備えています。
本章で学ぶ関数(function)は、複数の文をまとめて1つの処理として名前を付けたもので、部品の最小単位になります。
処理を機能単位で関数に分割すれば、プログラムの大局を見通せるようになって処理全体の把握が非常に楽になるのです。
また、処理を関数に分割しておけば、「表示がおかしい」などの不具合が見つかった場合、それを担当する関数だけを調べれば良いため、修正の範囲を限定できるメリットがあります。
さらに、関数は繰り返し使用できるので、同じ処理を何度も書く手間がなくなり、改良や修正も効率的に行うことができるようになります。

関数利用によるメリット
・プログラムの見通しが良くなり、処理全体を把握しやすくなる。
・機能単位で処理を記述するため、修正範囲を限定できる。
・同じ処理を1つの関数にまとめることで、作業効率が上がる。


void 関数名(void)
{
  関数が呼び出された時に実行する処理
}

※関数を定義すると、それより下の部分のソースコードでその関数を利用できる。
※関数定義の中で、別の関数を定義してはならない。


#include <stdio.h>

void hello(void) //関数の表明
{
  printf("こんにちは\n");  //関数の処理内容
}

voidとは、「無」や「何もない」ことを意味する英単語ですが、詳細は後ほど。今は気にする必要はありません。


関数の呼び出し
関数名();

C言語には、関数がいくつか定義されていても、必ずmain関数から動き始めるというルールがあります。
関数は定義しただけでは実行されません。関数呼び出しの行を削除すると「こんにちは」は表示されなくなります。


立場1 関数を定義する立場
立場2 関数を呼び出す立場

「hello関数を定義する自分」と「main関数の中でhello関数を呼び出す自分」とをあたかも別人物として捉えてプログラムを書くことが、C言語プログラミングの上達の近道です。
関数を定義する人は、関数を呼び出す人のことを考えて関数を作成するべきです。
関数の内容が想像しやすい名前であり、その関数を呼び出す側のプログラムを眺めた時にも、何の処理をしているか読み取れる必要がある。
処理内容のわかりにくさは、関数のそれを利用する側の処理へと波及し、やがてプログラム全体へと拡大してしまう。

int main(void)
{
  hello(); //ここでは挨拶を表示させている…と推測できる
  saveToFile(); //ここではファイルに保存している…と推測できる
  aaa(); //ここでは何をしているのか想像がつかない！
}

関数名は、関数を定義する人だけでなく、関数を呼び出す人にも大きな影響を与えます。
自分ひとりだけでなく、同じチームの仲間の開発効率をも左右するため、非常に重要なことなのです。

関数定義の1行目は特に重要な部分です。
ここには、この関数を定義する人と呼び出す人の双方に関わる重要な情報が記述されます。
関数を作る側は、「この関数はこの名前で、このように呼び出してほしい」と1行目で表明します。
関数を呼び出す側は、1行目に記述された情報を見て、「この関数はこの名前を使ってこのような形で呼び出せば良い」と理解します。
つまり、関数を定義する人、関数を呼び出す人の2つの立場の接点に当たるのが、この関数定義の1行目であるというわけです。

関数定義の1行目は人と人との接点
関数定義の1行目は、定義する人と呼び出す人の接点となる重要な情報が書かれる。

一方、関数定義の2行目以降に書く関数ブロックは、1行目ほどの重要性はありません。
関数を呼び出す人は、「正しい形で呼び出しさえすれば、きちんと仕事してくれる」という前提のもとに関数を呼び出します。
関数が内部でどのように処理するかまではいちいち気にする必要がないのです。


ところで、関数はmain関数以外からも呼び出すことができます。
funcAがfuncBを呼び出しています。
処理の流れとして、main関数→funcA→funcBの順に実行されます。


プロトタイプ宣言
戻り値の型 変数名(引数リスト);

※関数宣言の1行目と同じ内容を記述し、末尾にセミコロンを付ける。

プロトタイプ宣言には関数の処理内容は書かれませんが、関数の存在が表明されるため、プロトタイプ宣言を記述した行以降で関数を呼び出せるようになります。

「このソースコードにはfuncAとfuncBが存在します」とコンパイラに伝えています。
通常であれば、「funcAなんていう関数は定義されていない！呼び出せない！」と怒り始めるコンパイラも、「後ろの方で定義されるんだろう」と見込んでエラーを出しません。



関数を呼び出す際に、呼び出し元から値を渡すことができます。
渡される値を引数(argument)といい、呼び出された関数では、渡された値を受け取って処理に利用できます。


カッコの中に、整数の1が指定されています。
これは、hello関数を呼び出す際に、併せてその値を引き渡すことを意味します。

関数名の後ろのカッコの中で、int型の変数noを宣言しています。
hello関数が呼び出されると、渡された値が変数noに自動的に代入され、関数内で使用できるようになります。
このソースコードでは画面に表示する内容の判定に引数が使われ、1が渡された場合には、結果として「岬さん、こんにちは」と出力されます。

何も渡さない時でもカッコ自体は書く必要があり、()は「何も渡さない」ことを意味します。



引数は1つだけじゃなくて2つ以上渡すこともできる、これができると、もっと便利に感数を使えるようになる。

引数として渡す値が複数ある場合、値をカンマで区切って指定します。
また、関数側でも、変数をカンマで区切って宣言します。

引数が複数の場合、関数定義の1行目で宣言されている変数と、引数として渡す値の型と順序を揃えておかなければならない点に注意してください。
引数と変数の型が一致していなかったり、受け取るべき箱がなかったりするとコンパイルエラー発生します。


引数のある関数の定義
void 関数名(引数リスト)
{
  関数が呼び出されたときに実行する処理
}
※引数リストには、型 引数名をカンマで区切って指定する。

引数のある関数の呼び出し
関数名(引数リスト);
※引数リストには、リテラルや変数をカンマで区切って指定する。