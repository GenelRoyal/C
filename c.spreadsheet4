文を実行する順番のことを制御構造(または制御フロー)といい、代表的なものとして、順次・分岐・繰り返し(ループ)の3つが存在します。
構造化定理＝3つの制御構造を組み合わせることで、どんな複雑なプログラムでも作成することが理論上可能である。

if文

ifで処理を分岐できる。
ifの後ろの()には『晴れているか？』などの分岐条件を書く。
trueなら()後のブロック内の内容を実行。
falseならelseの後のブロック内の内容を実行。

while文

whileで繰り返し処理ができる。
whileの後ろの()内に、繰り返しを続ける条件を書く。
繰り返しを続ける条件が成立している限り、直後のブロックの内容が何度でも繰り返し実行される。

if文やwhile文のような制御構造を構造を指示する文を制御構文と言います。
制御構文の構成要素
条件式　分岐条件や繰り返しを続ける条件を示した式
ブロック　分岐や繰り返しで実行する一連の文の集まり

ブロック内で宣言した変数は、そのブロックが終わると同時に消滅します。
たとえば、while文のブロック内で宣言した変数は、そのブロックの外側では利用できません。
このような変数が利用可能な場所の範囲スコープ(scope)と言います。スコープを抜けるとその変数は消滅する。

関係演算子(relational operator)＝＝左辺と右辺を比較する演算子( == , != , > , < , >= , <= )

sw != false //変数swがfalseでなかったら
deg - 273.15 < 0 //変数degから273.15を引いた結果が0未満なら
initial == ''Z" //変数initialに入っている文字がZなら
特に「等しい」を表現する関係演算子は==であることに注意してください。
誤ってイコール1つだと代入演算子を意味するので、全く異なる動作をしてしまいます。
条件式に登場するイコール記号は==であることを認識。

算術演算子は文字どおり計算するためのもので、関係演算子は真(true)か偽(false)かを判定するためのもの。
if文とは、条件式の評価結果が真なら第1ブロックを、偽なら第2ブロックを実行する文。
while文とは、条件式の評価結果が真の間、ブロックを繰り返し実行する文。
if (isError)
  printf("エラーが発生しました\n");


int count = 10
if (count) {
  ...
}
整数をtrueまたはfalseに解釈する
0 → false(偽)
0以外 → true(真)
結果が0以外ならばtrueとして第1ブロックを、0ならばfalseと解釈して第2ブロックを自公します。
先ほどのif (count)をこのルールに則って読み解くと、変数countは0ではないため、ifブロックが実行されます。

boolとintは親戚関係
整数を自由に代入できるが、0以外を代入すると1として格納される。
int型として扱おうとすると、0と1に自動型変換される。

C言語でbool型を使用する際に1つだけ注意点があります。
それは、条件式ではtrueと比較する書き方を避けるべきという点です。
具体的には、if(a == true)やif(a != true)などと記述する代わりに、if(a)やif(!a)と書きます。
これは、真の場合は1ではなく「0でない」int値を返す命令がC言語には多く存在するからです。
例えば、10や-5などを返す可能性があるため、結果をtrue(すなわち1)と比較してしまうと意図と異なる動作をしてしまうためです。

C言語では、+演算子で文字列の連結はできないのと同様に、==演算子では文字列の比較が正しくできないことになっています。
ただ、間違って比較してもコンパイルエラーは出ませんので、原因に気づくまでに時間がかかってしまうタチの悪い問題です。

「年齢が18歳以上、かつ8月生まれ」のように、2つ以上の条件を組み合わせたより複雑な条件式を使いたい場合は、論理演算子を用います。
&& = かつ(両方の条件が満たられたらtrue)
|| = または(どちらかの条件が満たされたらtrue)

if ((hp < 100 && lv % 10 == 0) || (hp > 100 && lv % 10 != 0)) { ...
「hpが100未満かつlvが10の倍数である」または「hpが100以上かつlvが10の倍数でない」ときにブロックの内容を実行する。

なお、もし〜でなければのような否定形の条件式を作りたい場合は、条件式の前に否定演算子である ! を付けます。
if (!(age == 29)) {...  
この ! は論理演算子の一種ですが、直後の条件式や真偽値を反転させる機能を持っています。
! は、その右にあるtrueやfalseを逆転させる演算子です。

数学とC言語における条件式の表現の違い
数学:10 < X < 20 , C言語:10 < X && X < 20

